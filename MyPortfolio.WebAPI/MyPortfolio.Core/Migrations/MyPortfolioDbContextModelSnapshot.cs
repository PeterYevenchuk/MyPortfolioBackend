// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPortfolio.Core.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyPortfolio.Core.Migrations
{
    [DbContext(typeof(MyPortfolioDbContext))]
    partial class MyPortfolioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("MyPortfolio.Core.Certificates.Certificate", b =>
                {
                    b.Property<int>("CertificateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("CertificateID"));

                    b.Property<int>("AboutMeID")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CertificatePdf")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CertificateID");

                    b.HasIndex("AboutMeID");

                    b.ToTable("Certificates", "public");
                });

            modelBuilder.Entity("MyPortfolio.Core.Educations.Education", b =>
                {
                    b.Property<int>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("EducationID"));

                    b.Property<int>("AboutMeID")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("DateFinish")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Rang")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("EducationID");

                    b.HasIndex("AboutMeID");

                    b.ToTable("Educations", "public");
                });

            modelBuilder.Entity("MyPortfolio.Core.Experiences.Experience", b =>
                {
                    b.Property<int>("ExperienceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("ExperienceID"));

                    b.Property<int>("AboutMeID")
                        .HasColumnType("integer");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("DateFinish")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rang")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ExperienceID");

                    b.HasIndex("AboutMeID");

                    b.ToTable("Experiences", "public");
                });

            modelBuilder.Entity("MyPortfolio.Core.InfoAboutMe.AboutMe", b =>
                {
                    b.Property<int>("AboutMeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("AboutMeID"));

                    b.Property<byte>("Age")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhotoMeUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AboutMeID");

                    b.ToTable("AboutMe", "public");

                    b.HasData(
                        new
                        {
                            AboutMeID = 1,
                            Age = (byte)22,
                            Description = "On my portfolio site, I present myself as a highly skilled .NET developer ready to contribute significantly to your projects. I have more than 1.5 years of experience in C# and more than a year of experience as a .NET backend developer. In addition, I have successfully worked as a full-stack developer (.NET + React) for the past six months, which enhances my effectiveness in teamwork and provides a wider range of skills.\r\n\r\nMy strengths include the ability to write maintainable code according to best practices, developed analytical thinking, responsibility in the execution of tasks and effective time management. My adaptability allows me to work effectively both remotely and in the office, ensuring productivity and communication with the team regardless of location.\r\n\r\nThanks to my versatile experience and skills, I am always ready to take on new challenges. On my portfolio site, you can learn more about my work achievements and examples of projects that I have successfully completed. I will be happy to cooperate.",
                            Location = "Ukraine",
                            Name = "Petro",
                            PhotoMeUrl = "photo-me.jpg",
                            Position = ".Net Developer",
                            Surname = "Yevenchuk"
                        });
                });

            modelBuilder.Entity("MyPortfolio.Core.Projects.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("ProjectID"));

                    b.Property<int>("AboutMeID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("GitHubUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhotoProjectUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ProjectID");

                    b.HasIndex("AboutMeID");

                    b.ToTable("Projects", "public");
                });

            modelBuilder.Entity("MyPortfolio.Core.Skills.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("SkillID"));

                    b.Property<int>("AboutMeID")
                        .HasColumnType("integer");

                    b.Property<string>("MySkill")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SkillID");

                    b.HasIndex("AboutMeID");

                    b.ToTable("Skills", "public");
                });

            modelBuilder.Entity("MyPortfolio.Core.SocialLinks.SocialLink", b =>
                {
                    b.Property<int>("SocialLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("SocialLinkID"));

                    b.Property<int>("AboutMeID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SocialLinkID");

                    b.HasIndex("AboutMeID");

                    b.ToTable("SocialLinks", "public");
                });

            modelBuilder.Entity("MyPortfolio.Core.Users.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("UserID"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UserID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", "public");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Login = "myportfolioadmin@gmail.com",
                            Password = "WPGiUXw7hL1fwEY68x3pWDe/AtVHgo7bh0UaifjOexY=",
                            Role = 0,
                            Salt = "ex9mX76oqyQ27+pahx7ywg=="
                        });
                });

            modelBuilder.Entity("MyPortfolio.Core.Certificates.Certificate", b =>
                {
                    b.HasOne("MyPortfolio.Core.InfoAboutMe.AboutMe", "AboutMe")
                        .WithMany("Certificates")
                        .HasForeignKey("AboutMeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyPortfolio.Core.Educations.Education", b =>
                {
                    b.HasOne("MyPortfolio.Core.InfoAboutMe.AboutMe", "AboutMe")
                        .WithMany("Educations")
                        .HasForeignKey("AboutMeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyPortfolio.Core.Experiences.Experience", b =>
                {
                    b.HasOne("MyPortfolio.Core.InfoAboutMe.AboutMe", "AboutMe")
                        .WithMany("Experiences")
                        .HasForeignKey("AboutMeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyPortfolio.Core.Projects.Project", b =>
                {
                    b.HasOne("MyPortfolio.Core.InfoAboutMe.AboutMe", "AboutMe")
                        .WithMany("Projects")
                        .HasForeignKey("AboutMeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyPortfolio.Core.Skills.Skill", b =>
                {
                    b.HasOne("MyPortfolio.Core.InfoAboutMe.AboutMe", "AboutMe")
                        .WithMany("Skills")
                        .HasForeignKey("AboutMeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyPortfolio.Core.SocialLinks.SocialLink", b =>
                {
                    b.HasOne("MyPortfolio.Core.InfoAboutMe.AboutMe", "AboutMe")
                        .WithMany("SocialLinks")
                        .HasForeignKey("AboutMeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyPortfolio.Core.InfoAboutMe.AboutMe", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Projects");

                    b.Navigation("Skills");

                    b.Navigation("SocialLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
